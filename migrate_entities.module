<?php
use Drupal\Core\Form\FormStateInterface; 
use Drupal\migrate_entities\GetAllFunctions;

function migrate_entities_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
 if($form_id == 'simple_node_confirm_importing_form'){
    $form['submit'] = array(
    '#value' => t('Submit'),
    '#type' => 'submit',
    '#submit' =>array('migrate_entities_submit'), 
  );
    return $form;
  }
  
}
function migrate_entities_submit(&$form, FormStateInterface &$form_state){

  $dataValues = GetAllFunctions::MigrationSubmit($form_state);
  die('aaa');
  
}
 



function migrate_entities_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  //\Drupal::service('event_dispatcher')->dispatch(MigrateEvents::PREPARE_ROW, new MigratePrepareRowEvent($row, $source, $migration));
      
  //   \Drupal::logger('custom_migrate')->debug($source);
  //   \Drupal::logger('custom_migrate')->debug($migration);
  // echo "<pre>";
  // print_r($row);
  // print_r($row->getSource());

  $sessionVariable = \Drupal::service('user.private_tempstore')->get('simple_node_importer');
  $bundleType = $sessionVariable->get('bundle_type');  
  //print_r($row->getSource()); exit;
  foreach($row->getSource() as $key => $value) {
    $field_definitions = FieldTermType($key, $bundleType);
    if($field_definitions['field_type'] == 'datetime') {
      if($row->hasSourceProperty($key)) {         
        if(!empty($row->getSourceProperty($key))) {
          $dateformat = $row->getSourceProperty($key);
          $findColon = strpos($dateformat, ";");
          if($findColon !== false) {
            $dateExplode = explode(";", $dateformat);
            if(!empty($dateExplode)) {
              foreach($dateExplode as $dateKey => $dateValue) {                 
                $convertDate[] = date('Y-m-d\TH:i:s', strtotime($dateValue));
              }
              $dateVal = implode(';', $convertDate);               
              $row->setSourceProperty($key, $dateVal);
            }
          }
          else {
            $dateformat = $row->getSourceProperty($key);
            $convertDate = date('Y-m-d\TH:i:s', strtotime($dateformat));             
            $row->setSourceProperty($key, $convertDate);
          }     
        }    
      }
    }
    
    if($field_definitions['field_type'] == 'image') {      
      if($row->hasSourceProperty($key)) {         
        if(!empty($row->getSourceProperty($key))) {
          $imageformat = $row->getSourceProperty($key);
          $row->setSourceProperty($key, $imageformat);          
        }
      }
    }
  }
   
  
  // echo "Migration1:".$migration->id();
  // exit;
  // if($row->hasSourceProperty('field_dateofbirth')) {
  //   if(!empty($row->getSourceProperty('field_dateofbirth'))) {
  //     $dateformat = $row->getSourceProperty('field_dateofbirth');
  //     $convertDate = date('Y-m-d\TH:i:s', strtotime($dateformat));
  //     \Drupal::logger('migrate_entities')->debug($dateformat);
  //     \Drupal::logger('migrate_entities')->debug($convertDate);
  //     $row->setSourceProperty('field_dateofbirth', $convertDate);      
  //   }    
  // }
//$logger = \Drupal::service('logger.factory');
  
  //$date1 = $row->getSourceProperty('field_date');
  //$date = strtotime($date1); // -> 1336341600 unix timestamp
  //$date = date_format(date_create($date1), 'Y-m-d');
  //$date = date('Y-m-d H:i:s', $date); // -> "2012-05-07"
  //$row->setSourceProperty('field_date', $date);
  //$logger->get('custom_migrate')->debug("date:".$date);
  //$logger->get('custom_migrate')->debug("date1:".$date1);
  // $logger->get('custom_migrate')->debug(kint($row));
  // $logger->get('custom_migrate')->debug(kint($source));
  //$logger->get('custom_migrate')->debug(kint($migration));
  //$logger->get('custom_migrate')->debug($date);
  //$logger->get('custom_migrate')->debug($date1);

    //echo "Source1:";
    //kint($source);
    //kint($source->getPluginId());
  // kint($source->getBaseId());
  // echo "Migration1:";
  //kint($migration->id());
    //echo "<br>---------------------<br>";
     
  }